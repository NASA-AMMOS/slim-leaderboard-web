name: Run SLIM Analysis

on:
  workflow_dispatch:
    inputs:
      repository_url:
        description: 'Repository or Organization URL to analyze'
        required: true
        type: string
      target_type:
        description: 'Type of target (repository or organization)'
        required: true
        type: choice
        options:
          - repository
          - organization
        default: repository
      output_format:
        description: 'Output format'
        required: true
        type: choice
        options:
          - TABLE
          - TREE
          - MARKDOWN
          - PLAIN
        default: TABLE
      verbose:
        description: 'Verbose output'
        required: false
        type: boolean
        default: false
      emoji:
        description: 'Use emoji indicators'
        required: false
        type: boolean
        default: false
      unsorted:
        description: 'Unsorted results'
        required: false
        type: boolean
        default: false

jobs:
  analyze:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install slim-leaderboard
      run: |
        cd slim-leaderboard
        pip install -e .
        cd ..
        
    - name: Run SLIM Analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create config file
        cat > config.json << EOF
        {
          "targets": [{
            "type": "${{ inputs.target_type }}",
            "name": "${{ inputs.repository_url }}"
          }]
        }
        EOF
        
        # Build command
        COMMAND="slim-leaderboard --output_format ${{ inputs.output_format }}"
        
        if [ "${{ inputs.verbose }}" = "true" ]; then
          COMMAND="$COMMAND --verbose"
        fi
        
        if [ "${{ inputs.emoji }}" = "true" ]; then
          COMMAND="$COMMAND --emoji"
        fi
        
        if [ "${{ inputs.unsorted }}" = "true" ]; then
          COMMAND="$COMMAND --unsorted"
        fi
        
        COMMAND="$COMMAND config.json"
        
        # Run analysis and save output
        echo "Running: $COMMAND"
        $COMMAND > analysis-result.txt 2>&1
        
    - name: Upload analysis results
      uses: actions/upload-artifact@v4
      with:
        name: analysis-results
        path: analysis-result.txt
        
    - name: Create issue with results
      if: success()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const results = fs.readFileSync('analysis-result.txt', 'utf8');
          
          const issueTitle = `SLIM Analysis Results: ${{ inputs.repository_url }}`;
          const issueBody = `
          # SLIM Analysis Results
          
          **Target:** ${{ inputs.repository_url }}
          **Type:** ${{ inputs.target_type }}
          **Format:** ${{ inputs.output_format }}
          **Timestamp:** ${new Date().toISOString()}
          
          ## Results
          
          \`\`\`
          ${results}
          \`\`\`
          
          ---
          *This analysis was automatically generated by the SLIM Leaderboard Web Interface*
          `;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: issueTitle,
            body: issueBody,
            labels: ['slim-analysis', 'automated']
          });